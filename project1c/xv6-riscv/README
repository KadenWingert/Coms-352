Kaden Wingert

Description:
This assignment involves creating a MLFQ scheduler as a way for the OS to delegate which proccess gets to run next


Files Modified/Added:

Makefile - to accept the testsyscall file

kernel/proc.h - declared startMLFQ, stopMLFQ, and getMLFQInfo as well as MLFQ schedular, RR schedular, and everything relateed to the queue structure. Initialized MLFQ-related fields in allocProc to set initial values for newly created processes. 
Cleared MLFQ-related fields in freeproc to release resources and reset process state when a process is freed

kernel/proc.c - This is where the vast majority of the code is. I implemented functions sys_startMLFQ, sys_stopMLFQ and sys_getMLFQInfo. Altered schedular(void){} function to include the MLFQ_Schedular which I implemented following the skeleton code provided in the doc (the code for this method starts near line 630)
as well as the RR schedular which was derived from the original schedular function. I also imlemented the functions enqueue, dequeue, adn delete for the queue. I didn't end up using the dequeue and just used delete instead.
data structure

kernnel/syscall.c - Added the functions for the array mapping to the function that handles the system call as well as add the prototypes for these MLFQ scheduler system calls

kernel/syscall.h - Added unique system call number identifiers for the MLFQ scheduler functions sys_startMLFQ, sys_stopMLFQ and sys_getMLFQInfo

user/usyl.pl - added the entries for startMLFQ, stopMLFQ and getMLFQInfo

user/user.h - declared the signatures for startMLFQ, stopMLFQ and getMLFQInfo as well as struct MLFQInfoReport
